<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField :modelValue="internalValue" v-bind="fieldProps" name="custom-select-field">
        <div :class="`custom-select-wrapper ${wrapperClass}`">
            <TransitionVerticalCollapse v-for="item in items" :key="(item[itemKey as keyof TItem] as string | number)" :class="`custom-select-item ${itemClasses(item)}`" @click="selectItem(item as typeof internalValue)">
                <div v-if="!isMobile || showOverlay || item == internalValue">
                    <slot v-bind="{ item }">
                        {{ item }}
                    </slot>
                </div>
            </TransitionVerticalCollapse>
        </div>
    </RockFormField>
</template>

<style>
.custom-select-mobile-wrapper {
    position: relative;
}

.custom-select-mobile-modal-wrapper {
    position: relative;
    margin: -15px;
}

.custom-select-item {
    cursor: pointer;
}

.custom-select-expand-icon {
    color: rgba(0, 0, 0, 0.25);
    position: absolute;
    line-height: 10px;
    cursor: pointer;
    top: 50%;
    transform: translateY(-50%);
    right: .5rem;
}
</style>

<script setup lang="ts" generic="TItem, TKey extends keyof TItem">
    import { PropType, ref } from "vue";
    import { useScreenSize } from "@Obsidian/Utility/screenSize";
    import RockFormField from "@Obsidian/Controls/rockFormField.obs";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse.obs";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps, useVModelPassthrough } from "@Obsidian/Utility/component";

    const props = defineProps({
        /** V-model of the currently selected item */
        modelValue: {
            type: Object as PropType<TItem>,
            required: true
        },

        /** List of items to display in the control */
        items: {
            type: Array as PropType<TItem[]>,
            required: true
        },

        /** property name of the item to use as the unique key (used to control rendering) */
        itemKey: {
            type: String as unknown as PropType<TKey>,
            default: "id"
        },

        /** CSS class(es) to apply to the wrapper element */
        wrapperClass: {
            type: String,
            default: ""
        },

        /** CSS class(es) to apply to the item element */
        itemClass: {
            type: String,
            default: ""
        },

        /** CSS class(es) to apply to the selected item. Default: "selected" */
        selectedClass: {
            type: String,
            default: "selected"
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: TItem): void
    }>();

    // #region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const fieldProps = useStandardRockFormFieldProps(props);
    const { isMobile } = useScreenSize();
    const showOverlay = ref(false);

    // #endregion

    // #region Functions

    function itemClasses(item: TItem): string {
        const classes = [
            props.itemClass
        ];

        if (item === internalValue.value) {
            classes.push(props.selectedClass);
        }

        return classes.join(" ");
    }

    function selectItem(item: typeof internalValue.value): void {
        if (showOverlay.value || !isMobile.value) {
            internalValue.value = item;
            showOverlay.value = false;
        }
        else {
            showOverlay.value = true;
        }
    }

    // #endregion

    // #region Event Handlers

    // #endregion

    // #region Lifecycle

    // #endregion
</script>
