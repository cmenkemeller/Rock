<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <LocationItemPicker v-if="numericSelectedMode === LocationPickerMode.Named" v-model="itemValue" v-model:showPopup="popupStatus">
        <template #pickerContentSuperHeader v-if="options.length > 1">
            <RadioButtonList v-model="selectedMode" :items="options" horizontal />
        </template>
        <template #prepend="{ isInputGroupSupported }" v-if="$slots.prepend">
            <slot name="prepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #inputGroupPrepend="{ isInputGroupSupported }" v-if="$slots.inputGroupPrepend">
            <slot name="inputGroupPrepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #append="{ isInputGroupSupported }" v-if="$slots.append">
            <slot name="append" :isInputGroupSupported="isInputGroupSupported" />
        </template>
    </LocationItemPicker>
    <LocationAddressPicker v-if="numericSelectedMode === LocationPickerMode.Address" v-model="addressValue" v-model:showPopup="popupStatus">
        <template #pickerContentSuperHeader v-if="options.length > 1">
            <RadioButtonList v-model="selectedMode" :items="options" horizontal />
        </template>
        <template #prepend="{ isInputGroupSupported }" v-if="$slots.prepend">
            <slot name="prepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #inputGroupPrepend="{ isInputGroupSupported }" v-if="$slots.inputGroupPrepend">
            <slot name="inputGroupPrepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #append="{ isInputGroupSupported }" v-if="$slots.append">
            <slot name="append" :isInputGroupSupported="isInputGroupSupported" />
        </template>
    </LocationAddressPicker>
    <GeoPicker v-if="numericSelectedMode === LocationPickerMode.Point" v-model="pointValue" drawingMode="Point" v-model:showPopup="popupStatus">
        <template #pickerContentSuperHeader v-if="options.length > 1">
            <RadioButtonList v-model="selectedMode" :items="options" horizontal />
        </template>
        <template #prepend="{ isInputGroupSupported }" v-if="$slots.prepend">
            <slot name="prepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #inputGroupPrepend="{ isInputGroupSupported }" v-if="$slots.inputGroupPrepend">
            <slot name="inputGroupPrepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #append="{ isInputGroupSupported }" v-if="$slots.append">
            <slot name="append" :isInputGroupSupported="isInputGroupSupported" />
        </template>
    </GeoPicker>
    <GeoPicker v-if="numericSelectedMode === LocationPickerMode.Polygon" v-model="fenceValue" drawingMode="Polygon" v-model:showPopup="popupStatus">
        <template #pickerContentSuperHeader v-if="options.length > 1">
            <RadioButtonList v-model="selectedMode" :items="options" horizontal />
        </template>
        <template #prepend="{ isInputGroupSupported }" v-if="$slots.prepend">
            <slot name="prepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #inputGroupPrepend="{ isInputGroupSupported }" v-if="$slots.inputGroupPrepend">
            <slot name="inputGroupPrepend" :isInputGroupSupported="isInputGroupSupported" />
        </template>
        <template #append="{ isInputGroupSupported }" v-if="$slots.append">
            <slot name="append" :isInputGroupSupported="isInputGroupSupported" />
        </template>
    </GeoPicker>
</template>

<script lang="ts" setup>
    import LocationItemPicker from "./locationItemPicker.obs";
    import LocationAddressPicker from "./locationAddressPicker.obs";
    import GeoPicker from "./geoPicker.obs";
    import RadioButtonList from "./radioButtonList.obs";
    import { computed, PropType, ref, watch } from "vue";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { AddressControlBag } from "@Obsidian/ViewModels/Controls/addressControlBag";

    const enum LocationPickerMode {
        Address = 1,
        Named = 2,
        Point = 4,
        Polygon = 8,
        All = Address | Named | Point | Polygon
    }

    const props = defineProps({
        modelValue: {
            type: Object as PropType<AddressControlBag | ListItemBag | string>
        },

        currentPickerMode: {
            type: Number as PropType<LocationPickerMode>,
            default: 2
        },

        allowedPickerModes: {
            type: Number as PropType<LocationPickerMode>,
            default: 15
        }
    });

    const emit = defineEmits<{
        (_e: "update:modelValue", value: AddressControlBag | ListItemBag | string): void
        (_e: "update:currentPickerMode", value: LocationPickerMode): void
    }>();

    const selectedMode = ref<"1" | "2" | "4" | "8">(props.currentPickerMode.toString() as "1" | "2" | "4" | "8");
    const numericSelectedMode = computed(() => Number(selectedMode.value));

    const options = computed(() => {
        const optionList: ListItemBag[] = [];

        if (props.allowedPickerModes & LocationPickerMode.Named) {
            optionList.push({
                text: "Location",
                value: "2"
            });
        }

        if (props.allowedPickerModes & LocationPickerMode.Address) {
            optionList.push({
                text: "Address",
                value: "1"
            });
        }

        if (props.allowedPickerModes & LocationPickerMode.Point) {
            optionList.push({
                text: "Point",
                value: "4"
            });
        }

        if (props.allowedPickerModes & LocationPickerMode.Polygon) {
            optionList.push({
                text: "Geo-fence",
                value: "8"
            });
        }

        return optionList;
    });

    const itemValue = ref<ListItemBag>({});
    const addressValue = ref<AddressControlBag>({});
    const pointValue = ref<string>("");
    const fenceValue = ref<string>("");

    const popupStatus = ref<boolean>(false);

    const internalValue = computed(() => {
        if (numericSelectedMode.value === LocationPickerMode.Address) {
            return addressValue.value;
        }
        if (numericSelectedMode.value === LocationPickerMode.Named) {
            return itemValue.value;
        }
        if (numericSelectedMode.value === LocationPickerMode.Point) {
            return pointValue.value;
        }
        if (numericSelectedMode.value === LocationPickerMode.Polygon) {
            return fenceValue.value;
        }

        return "";
    });

    watch(internalValue, () => emit("update:modelValue", internalValue.value));

    watch(numericSelectedMode, () => emit("update:currentPickerMode", numericSelectedMode.value));

    watch(() => props.currentPickerMode, () => {
        selectedMode.value = props.currentPickerMode.toString() as "1" | "2" | "4" | "8";
    });

    watch(() => props.allowedPickerModes, () => {
        if (!(props.allowedPickerModes & numericSelectedMode.value)) {
            selectedMode.value = options.value[0].value as "1" | "2" | "4" | "8";
        }
    }, { immediate: true });

    watch(numericSelectedMode, () => emit("update:currentPickerMode", numericSelectedMode.value));
</script>