<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NumberBox v-model="internalValue"
               :placeholder="placeholder"
               :minimumValue="minimumValue"
               :maximumValue="maximumValue"
               :decimalCount="decimalPlaces"
               rules="decimal">
        <template v-slot:inputGroupPrepend>
            <span class="input-group-addon">{{ symbol }}</span>
        </template>
    </NumberBox>
</template>

<script setup lang="ts">
    import { PropType, computed, ref, watch } from "vue";
    import NumberBox from "./numberBox.obs";
    import { Guid } from "@Obsidian/Types";
    import { CurrencyBoxGetCurrencyInfoOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/currencyBoxGetCurrencyInfoOptionsBag";
    import { CurrencyBoxGetCurrencyInfoResultsBag } from "@Obsidian/ViewModels/Rest/Controls/currencyBoxGetCurrencyInfoResultsBag";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { useHttp } from "@Obsidian/Utility/http";
    import { emptyGuid } from "@Obsidian/Utility/guid";

    const props = defineProps({
        modelValue: {
            type: Number as PropType<number | null>,
            default: null
        },

        /** The minimum allowed value to be entered. */
        minimumValue: {
            type: Number as PropType<number | null>
        },

        /** The maximum allowed value to be entered. */
        maximumValue: {
            type: Number as PropType<number | null>
        },

        currencyCodeDefinedValueGuid: {
            type: String as PropType<Guid>,
            default: emptyGuid
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: number | null): void;
    }>();

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const decimalPlaces = ref(2);
    const symbol = ref("$");

    const http = useHttp();

    const placeholder = computed(() => {
        return (0).toLocaleString("en-US", {
            minimumFractionDigits: decimalPlaces.value,
            maximumFractionDigits: decimalPlaces.value
        });
    });

    // #region Functions

    /**
     * Loads the items from the server.
     */
    async function loadOptions(): Promise<void> {
        const options: Partial<CurrencyBoxGetCurrencyInfoOptionsBag> = {
            currencyCodeGuid: props.currencyCodeDefinedValueGuid
        };
        const result = await http.post<CurrencyBoxGetCurrencyInfoResultsBag>("/api/v2/Controls/CurrencyBoxGetCurrencyInfo", undefined, options);

        if (result.isSuccess && result.data) {
            symbol.value = result.data.symbol ?? "$";
            decimalPlaces.value = result.data.decimalPlaces ?? 2;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
        }
    }

    // #endregion

    watch(() => props.currencyCodeDefinedValueGuid, loadOptions, { immediate: true });
</script>
