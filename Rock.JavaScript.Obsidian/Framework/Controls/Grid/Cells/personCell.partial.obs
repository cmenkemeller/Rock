<template>
    <div class="d-flex flex-fill align-items-center">
        <div v-if="!hideAvatar" class="mr-2 flex-shrink-0"
             :style="{ 'width': '24px', 'height': '24px', 'border-radius': '12px', 'background-image': `url('${photoUrl}')`, 'background-size': 'cover' }">
        </div>
        <div class="flex-grow-1">
            <template v-if="showAsLink && idKey">
                <a :href="`/person/${idKey}`"><strong>{{ formattedName }}</strong></a>
            </template>
            <template v-else>
                <strong>{{ formattedName }}</strong>
            </template>
            <div v-if="showDetailField && detailText" class="text-muted">{{ detailText }}</div>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { standardCellProps } from "@Obsidian/Core/Controls/grid";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";
    import { computed } from "vue";

    const props = defineProps(standardCellProps);

    const showAsLink = props.column.props.showAsLink;
    const hideAvatar = props.column.props.hideAvatar;
    const idKey = computed((): string | undefined => {
        if (!props.column.field) {
            return undefined;
        }
        const value = props.row[props.column.field] as PersonFieldBag;
        if (typeof value?.idKey === "string") {
            return value.idKey;
        }
        return undefined;
    });

    /** Contains the URL for the avatar. */
    const photoUrl = computed((): string => {
        if (!props.column.field) {
            return "";
        }

        const value = props.row[props.column.field] as PersonFieldBag;

        if (!value || typeof value !== "object") {
            return "";
        }

        return value.photoUrl ?? "";
    });

    /** Contains the full name in the correct format. */
    const formattedName = computed((): string => {
        if (!props.column.field) {
            return "";
        }

        const value = props.row[props.column.field] as PersonFieldBag;

        if (!value || typeof value !== "object") {
            return "";
        }

        if (props.column.props.showLastNameFirst === true) {
            return `${value.lastName ?? ""}, ${value.nickName ?? ""}`;
        }

        return `${value.nickName ?? ""} ${value.lastName ?? ""}`;
    });

    /** Determines whether to show the detail field */
    const showDetailField = computed((): boolean => {
        return props.column.props.detailField !== false;
    });

    /** Contains the detail text to display */
    const detailText = computed((): string => {
        if (!props.column.field || !showDetailField.value) {
            return "";
        }

        const value = props.row[props.column.field] as PersonFieldBag;

        if (!value || typeof value !== "object") {
            return "";
        }

        const detailField = props.column.props.detailField;

        if (typeof detailField === "string") {
            if (detailField === "connectionStatus") {
                return value.connectionStatus ?? "";
            }
            else {
                // Treat detailField as a custom string value
                return detailField;
            }
        }

        return "";
    });

</script>
