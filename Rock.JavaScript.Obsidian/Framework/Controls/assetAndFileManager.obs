<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div id="pnlAssetManager" class="picker-wrapper">
        <div class="picker-folders d-flex flex-column h-100 mh-100 bg-body p-2 mr-2">
            <input type="hidden" name="hfScriptInitialized" id="hfScriptInitialized" value="True">
            <input type="hidden" name="hfSelectedValue" id="hfSelectedValue">
            <input class="js-assetstorage-id" type="hidden" name="hfAssetStorageId" id="hfAssetStorageId" value="1">
            <input class="js-selectfolder" type="hidden" name="hfSelectFolder" id="hfSelectFolder" value="~/Content/ExternalSite/Icons/">
            <input class="js-expandedFolders" type="hidden" name="hfExpandedFolders" id="hfExpandedFolders" value="1,~/Content/,True||1,~/Content/ExternalSite/">
            <input class="js-isroot" type="hidden" name="hfIsRoot" id="hfIsRoot" value="false">

            <div class="mb-2 d-flex flex-shrink-0">
                <RockButton type="button" btnSize="xs" class="mr-2" title="Create a new folder in the selected folder" @click="showAddFolderForm" :disabled="!isFolderSelected">
                    <i class="fa fa-folder-plus"></i> <span class="hidden-xs">Add Folder</span>
                </RockButton>
                <RockButton type="button" btnSize="xs" title="Refresh folder list" isSquare class="ml-auto mr-2">
                    <!-- TODO -->
                    <i class="fa fa-sync"></i>
                </RockButton>
                <RockButton type="button" btnSize="xs" title="Additional Actions" isSquare :disabled="!isFolderSelected">
                    <i class="fa fa-ellipsis-v"></i>
                </RockButton>
            </div>

            <div v-show="isCreateFolderFormVisible" class="mb-2 well well-sm js-createfolder-div flex-shrink-0">
                <input name="tbCreateFolder" type="text" class="input-sm form-control mb-2">
                <RockButton @click="addFolder" type="button" btnSize="xs" class="mr-2">
                    <i class="fa fa-check"></i> Create Folder
                </RockButton>
                <RockButton @click="cancelAddFolder" type="button" btnSize="xs">
                    <i class="fa fa-times"></i> Cancel
                </RockButton>
                <label class="js-createfolder-notification alert alert-warning" style="display:none;">
                    <!-- TODO -->
                </label>
            </div>

            <div class="overflow-y-auto overflow-x-auto mh-100" style="z-index:0">
                <!-- TODO: disallow deselect -->
                <TreeList v-model="selectedFolderArray" :provider="itemProvider" disableDeselect />
            </div>
        </div>

        <div class="picker-files d-flex flex-column h-100 mh-100 p-2">
            <div class="mb-3 d-flex">
                <div class="fileupload-group" title="Upload a file to the selected location" style="display:none;">
                    <div class="js-upload-progress upload-progress-sm">
                        <!-- TODO -->
                        <i class="fa fa-refresh fa-lg fa-spin"></i>
                        <div class="js-upload-progress-percent"></div>
                    </div>
                </div>
                <label class="btn btn-xs btn-default mr-2">
                    <i class="fa fa-upload"></i> <span class="hidden-xs">Upload File</span>
                    <!-- TODO -->
                    <input type="file" class="hidden" multiple @change="uploadFile">
                </label>
                <label class="btn btn-xs btn-default mr-2">
                    <i class="fa fa-archive"></i> <span class="hidden-xs">Upload Package</span>
                    <!-- TODO -->
                    <input type="file" class="hidden" accept=".zip" @change="uploadZipFile">
                </label>
                <RockButton type="button" btnSize="xs" title="Delete selected files" class="mr-2">
                    <i class="fa fa-trash-alt"></i> <span class="hidden-xs">Delete Selected</span>
                </RockButton>
                <RockButton type="button" btnSize="xs" title="Refresh file list" class="ml-auto">
                    <i class="fa fa-sync"></i>
                </RockButton>
            </div>

            <div class="overflow-y-auto mh-100">
                <table class="table table-responsive table-borderless assetmanager-files">
                    <tbody>
                        <tr v-for="file in files" :key="file.key">
                            <td>
                                <CheckBox label="" v-model="selectedFiles" :value="file.key" />
                            </td>
                            <td>
                                <!-- TODO: Size show in Figma: 44px x 58px -->
                                <img :src="file.previewSrc" style="max-width:60px;">
                            </td>
                            <td>
                                <span v-show="shownFileRenameForm != file.key">{{ file.name }} <i class="fa fa-edit" @click="() => showRenameFileForm(file)"></i></span>
                                <RockForm class="d-flex align-items-center" v-if="shownFileRenameForm == file.key" @submit="() => renameFile(file)" @keyup.esc="hideRenameFileForm">
                                    <TextBox v-model="fileName" size="small" formGroupClasses="mr-2 mb-0" disableLabel id="asset-manager-current-file-rename-input" />
                                    <RockButton type="submit" btnType="default" btnSize="xs" class="mr-2 flex-shrink-0" title="Rename File" isSquare><i class="fa fa-check"></i></RockButton>
                                    <RockButton type="button" btnType="default" btnSize="xs" class="flex-shrink-0" title="Cancel" isSquare @click="hideRenameFileForm"><i class="fa fa-times"></i></RockButton>
                                </RockForm>
                            </td>
                            <td data-priority="3">
                                {{ file.modified }}
                            </td>
                            <td>
                                {{ file.fileSize }}
                            </td>
                            <td>
                                <!-- TODO -->
                                <RockButton type="button" btnType="link" class="text-body"><i class="fa fa-ellipsis-v"></i></RockButton>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</template>

<style scoped>
.assetmanager-files th,
.assetmanager-files td {
    vertical-align: middle;
}

/*
.table-borderless th,
.table-borderless td {
    border: 0;
}
*/
</style>

<script setup lang="ts">
    import { PropType, computed, nextTick, ref } from "vue";
    import RockButton from "./rockButton.obs";
    import RockForm from "./rockForm.obs";
    import TextBox from "./textBox.obs";
    import CheckBox from "./checkBox.obs";
    import TreeList from "./treeList.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { AssetManagerTreeItemProvider } from "@Obsidian/Utility/treeItemProviders";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ListItemBag>,
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ListItemBag): void
    }>();

    const internalValue = useVModelPassthrough(props, "modelValue", emit);

    // #region Folder List

    const itemProvider = ref(new AssetManagerTreeItemProvider());
    const selectedFolderArray = ref<string[]>([]);
    const selectedFolder = computed<string | null>(() => decodeURIComponent(selectedFolderArray.value[0] ?? "") || null);
    const isFolderSelected = computed(() => !!selectedFolder.value);

    const isCreateFolderFormVisible = ref(false);
    const newFolderName = ref("");

    function showAddFolderForm(): void {
        isCreateFolderFormVisible.value = true;
    }

    function addFolder(): void {
        // TODO
        //...
        newFolderName.value = "";
    }

    function cancelAddFolder(): void {
        isCreateFolderFormVisible.value = false;
        newFolderName.value = "";
    }

    function deleteSelectedFolder(): void {
        // TODO
    }

    // #endregion

    // #region File List

    const shownFileRenameForm = ref<string | null>(null);
    const fileName = ref("");
    const selectedFiles = ref<string[]>([]);
    const files = ref([
        {
            name: "favicon.ico",
            key: "~/Content/ExternalSite/Icons/favicon.ico",
            url: "http://localhost:6229//Content/ExternalSite/Icons/favicon.ico",
            previewSrc: "/Content/ASM_Thumbnails/1/Content/ExternalSite/Icons/favicon.ico",
            modified: "5/3/2022 10:50:38 AM",
            fileSize: "8 KB"
        },
        {
            name: "touch-icon-ipad-retina.png",
            key: "~/Content/ExternalSite/Icons/touch-icon-ipad-retina.png",
            url: "http://localhost:6229//Content/ExternalSite/Icons/touch-icon-ipad-retina.png",
            previewSrc: "/Content/ASM_Thumbnails/1/Content/ExternalSite/Icons/touch-icon-ipad-retina.png",
            modified: "5/3/2022 10:50:38 AM",
            fileSize: "3 KB"
        },
        {
            name: "touch-icon-ipad.png",
            key: "~/Content/ExternalSite/Icons/touch-icon-ipad.png",
            url: "http://localhost:6229//Content/ExternalSite/Icons/touch-icon-ipad.png",
            previewSrc: "/Content/ASM_Thumbnails/1/Content/ExternalSite/Icons/touch-icon-ipad.png",
            modified: "5/3/2022 10:50:38 AM",
            fileSize: "1 KB"
        },
        {
            name: "touch-icon-iphone-retina.png",
            key: "~/Content/ExternalSite/Icons/touch-icon-iphone-retina.png",
            url: "http://localhost:6229//Content/ExternalSite/Icons/touch-icon-iphone-retina.png",
            previewSrc: "/Content/ASM_Thumbnails/1/Content/ExternalSite/Icons/touch-icon-iphone-retina.png",
            modified: "5/3/2022 10:50:38 AM",
            fileSize: "2 KB"
        },
        {
            name: "touch-icon-iphone.png",
            key: "~/Content/ExternalSite/Icons/touch-icon-iphone.png",
            url: "http://localhost:6229//Content/ExternalSite/Icons/touch-icon-iphone.png",
            previewSrc: "/Content/ASM_Thumbnails/1/Content/ExternalSite/Icons/touch-icon-iphone.png",
            modified: "5/3/2022 10:50:38 AM",
            fileSize: "1 KB"
        },
        {
            name: "touch-icon-android.png",
            key: "~/Content/ExternalSite/Icons/touch-icon-android.png",
            url: "http://localhost:6229//Content/ExternalSite/Icons/touch-icon-iphone.png",
            previewSrc: "/Content/ASM_Thumbnails/1/Content/ExternalSite/Icons/touch-icon-iphone.png",
            modified: "5/8/2022 10:50:38 AM",
            fileSize: "5 KB"
        },
    ]);

    async function showRenameFileForm(file): Promise<void> {
        shownFileRenameForm.value = file.key;
        fileName.value = file.name;

        await nextTick();

        const inputField = document.querySelector(`#asset-manager-current-file-rename-input`);

        if (inputField) {
            (inputField as HTMLElement).focus();
        }
    }

    function renameFile(file): void {
        // TODO: Save file changes to server, update local version, show loading spinner
        console.debug("RENAME FILE", file, fileName.value);
        hideRenameFileForm();
    }

    function hideRenameFileForm(): void {
        shownFileRenameForm.value = null;
        fileName.value = "";
    }

    function uploadFile(): void {
        // TODO
    }

    function uploadZipFile(): void {
        // TODO
    }

    function deleteFile(): void {
        // TODO
    }

    // #endregion

</script>
