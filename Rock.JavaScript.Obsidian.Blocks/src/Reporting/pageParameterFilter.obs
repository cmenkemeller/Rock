<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="config.errorMessage" :alertType="AlertType.Warning">
        {{ config.errorMessage }}
    </NotificationBox>

    <Panel v-else type="block"
           :hasTitle="config.showBlockTitle"
           :title="config.blockTitleText"
           :titleIconCssClass="config.blockTitleIconCssClass">

        <AttributeValuesContainer v-model="filterValues"
                                  :isEditMode="true"
                                  :attributes="filters"
                                  :showCategoryLabel="false"
                                  :numberOfColumns="config.filtersPerRow" />

        <RockButton v-if="config.showFilterButton"
                    :btnType="BtnType.Primary"
                    :btnSize="btnSize">
            {{ config.filterButtonText }}
        </RockButton>

        <RockButton v-if="config.showResetFiltersButton"
                    :btnType="BtnType.Link"
                    :btnSize="btnSize">
            Reset Filters
        </RockButton>

    </Panel>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { AlertType } from "@Obsidian/Enums/Controls/alertType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { PageParameterFilterInitializationBox } from "@Obsidian/ViewModels/Blocks/Reporting/PageParameterFilter/pageParameterFilterInitializationBox";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";

    const config = useConfigurationValues<PageParameterFilterInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();
    const reloadBlock = useReloadBlock();

    // #region Values

    const filters = ref<Record<string, PublicAttributeBag>>(config.filters ?? {});
    const filterValues = ref<Record<string, string>>(config.filterValueDefaults ?? {});

    // #endregion Values

    // #region Computed Values

    const btnSize = computed((): BtnSize => {
        switch (config?.filterButtonSize) {
            case "1":
                return "";
            case "2":
                return "sm";
            case "3":
            default:
                return "xs";
        }
    });

    // #endregion Computed Values

    onConfigurationValuesChanged(reloadBlock);
</script>
