<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel :hasFullscreen="true"
           :headerSecondaryActions="[{
               title: 'TBD', type: 'default'
           }]"
           type="block">
        <template #title>
            <div class="email-editor-panel-title">
                <span>Email Editor</span>
                <HighlightLabel>1234 Recipients</HighlightLabel>
            </div>
        </template>

        <template #subheaderRight>
            <div>
                <RockButton class="email-editor-subheader-action" btnSize="xs">Send Test</RockButton>
                <RockButton class="email-editor-subheader-action" btnSize="xs">Preview</RockButton>
                <RockButton class="email-editor-subheader-action" btnSize="xs">Save</RockButton>
            </div>
        </template>

        <template #default>
            <div class="email-editor-panel-body">
                <div class="email-editor-designer">
                    <div class="email-editor-toolbox">
                        <div class="email-editor-toolbox-menu">
                            <div :class="['menu-item', toolboxMenuItem === 'content' ? 'selected' : '']" @click="toolboxMenuItem = 'content'"><i class="fa fa-grip-horizontal"></i><span>Content</span></div>
                            <div :class="['menu-item', toolboxMenuItem === 'design' ? 'selected' : '']" @click="toolboxMenuItem = 'design'"><i class="fa fa-drafting-compass"></i><span>Design</span></div>
                        </div>

                        <div v-if="toolboxMenuItem === 'content'" class="email-editor-toolbox-submenu">
                            <TabbedContent v-model="toolboxSubMenuTab" :tabs="toolboxSubMenuTabs">
                                <template #tabpane="{ item }">
                                    <div class="email-editor-toolbox-submenu-content">
                                        <div v-if="item === 'Components'" class="component-list">
                                            <div v-for="componentType in componentTypes"
                                                 :key="componentType.typeName"
                                                 class="component-list-item"
                                                 draggable="true"
                                                 @dragstart="onComponentTypeDragStart(componentType)"
                                                 @dragend="onComponentTypeDragEnd()"><i :class="componentType.iconCssClass"></i>{{ componentType.title }}</div>
                                        </div>

                                        <div v-else-if="item === 'Sections'">
                                            <DropDownList v-model="sectionCategory" :items="sectionCategories" label="Category">
                                                <template #inputGroupPrepend>
                                                    <div class="input-group-addon">
                                                        <i class="fa fa-folder"></i>
                                                    </div>
                                                </template>
                                            </DropDownList>

                                            <div class="section-list">
                                                <div v-for="sectionComponentType in sectionComponentTypes"
                                                     :key="sectionComponentType.typeName"
                                                     class="section-list-item"
                                                     draggable="true"
                                                     @dragstart="onComponentTypeDragStart(sectionComponentType)"
                                                     @dragend="onComponentTypeDragEnd()"><i :class="sectionComponentType.iconCssClass"></i>{{ sectionComponentType.title }}</div>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                            </TabbedContent>
                        </div>

                        <div v-else-if="toolboxMenuItem === 'design'" class="email-editor-toolbox-submenu">
                            Hello!
                        </div>
                    </div>

                    <div class="email-editor-window-wrapper">
                        <EditorWindow :html="config.emailMessage"
                                      :draggingComponentType="draggingComponentType"
                                      @selectComponent="selectedComponent = $event" />
                    </div>
                </div>

                <div class="actions">
                    <div class="footer-actions">
                        <RockButton>Previous</RockButton>
                    </div>
                    <div class="footer-secondary-actions">
                        <RockButton btnType="primary">Next</RockButton>
                    </div>
                </div>
            </div>
        </template>
    </Panel>
</template>

<style scoped>
@import "/Styles/RockFont/style.css";

[draggable] {
    cursor: grab;
}

[draggable]:active {
    cursor: grabbing;
}

.component-list {
    display: flex;
    flex-direction: row;
    /* TODO JMH Is this supported? */
    gap: 16px;
    flex-wrap: wrap;
}

.section-list {
    display: flex;
    flex-direction: column;
    /* TODO JMH Is this supported? */
    gap: 16px;
}

.component-list-item {
    display: flex;
    flex-direction: column;
    width: 86px;
    height: 74px;
    text-align: center;
    align-items: center;
    border: 1px solid;
    justify-content: center;
}

.section-list-item {
    display: flex;
    flex-direction: column;
    height: 74px;
    text-align: center;
    align-items: center;
    border: 1px solid;
    justify-content: center;
}

.component-list-item:active, .section-list-item:active {
    border-color: var(--color-primary);
}

.email-editor-toolbox {
    display: flex;
    flex-wrap: wrap;
}

.email-editor-toolbox-menu {
    background-color: gray;
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.menu-item {
    display: flex;
    flex-direction: column;
    width: 86px;
    height: 74px;
    text-align: center;
    align-items: center;
    gap: 16px;
    justify-content: center;
    cursor: pointer;
}

.menu-item.selected {
    background-color: white;
}

.email-editor-toolbox-submenu {
    display: flex;
    flex-direction: column;
    width: 322px;
}

.email-editor-toolbox-submenu-content {
    padding: 16px;
}

.email-editor-panel-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.email-editor-subheader-action + .email-editor-subheader-action {
    margin-left: 16px;
}

.email-editor-panel-body {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.email-editor-designer {
    display: flex;
    flex-grow: 1;
}

.email-editor-window-wrapper {
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: lightgray;
}
</style>

<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import { buttonComponent, dividerComponent, imageComponent, lavaComponent, messageComponent, oneColumnSectionComponent, paragraphComponent, rsvpComponent, threeColumnSectionComponent, titleComponent, twoColumnSectionComponent, videoComponent } from "./CommunicationWizard/components.partial";
    import EditorWindow from "./CommunicationWizard/editorWindow.partial.obs";
    import { EditorComponent, EditorComponentType } from "./CommunicationWizard/types.partial";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import HighlightLabel from "@Obsidian/Controls/highlightLabel.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import TabbedContent from "@Obsidian/Controls/tabbedContent.obs";
    import { useConfigurationValues } from "@Obsidian/Utility/block";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const config = useConfigurationValues<{ emailMessage?: string | null | undefined; }>();

    // #region Values

    const toolboxMenuItem = ref<"content" | "design">("content");
    const toolboxSubMenuTab = ref<string>("");
    const draggingComponentType = ref<EditorComponentType | null | undefined>();
    const sectionCategory = ref<string>("");
    const sectionCategories = ref<ListItemBag[]>([]);
    const selectedComponent = ref<EditorComponent | null | undefined>();

    // #endregion

    // #region Computed Values

    const toolboxSubMenuTabs = computed<string[]>(() => {
        return [
            "Components",
            "Sections"
        ];
    });

    const componentTypes: EditorComponentType[] = [
        titleComponent,
        videoComponent,
        buttonComponent,
        paragraphComponent,
        dividerComponent,
        messageComponent,
        imageComponent,
        lavaComponent,
        rsvpComponent,
    ];

    const sectionComponentTypes: EditorComponentType[] = [
        oneColumnSectionComponent,
        twoColumnSectionComponent,
        threeColumnSectionComponent
    ];

    // #endregion

    // #region Event Handlers

    /**
     * Handles a component type starting to be dragged in the parent window
     * and passes arguments to the child editor iframe to handle the event in the editor.
     */
    function onComponentTypeDragStart(componentType: EditorComponentType): void {
        draggingComponentType.value = componentType;
    }

    /**
     * Handles a component type stopping being dragged
     * and passes arguments to the child editor iframe to handle the event.
     *
     * This is the last event that is occurs in the drag-drop cycle.
     */
    function onComponentTypeDragEnd(): void {
        draggingComponentType.value = null;
    }

    // #endregion

    // #region Functions

    function showComponentProperties(selectedComponent: EditorComponent): void { }

    // #endregion

    // #region Watchers

    watch(selectedComponent, () => {
        if (selectedComponent.value && selectedComponent.value.type.typeName === "section") {
            showComponentProperties(selectedComponent.value);
        }
    });

    // #endregion

    // #region Hooks

    // #endregion
</script>
