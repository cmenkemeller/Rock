<template>
    <Panel v-model="isGeneralSettingsExpanded"
           :hasCollapse="true"
           title="General Settings">
        <Width :modelValue="modelValue.body" label="Content Area Width" />
        <BackgroundColor :modelValue="modelValue.documentElement" />
        <BackgroundColor :modelValue="modelValue.body" label="Body Color" />
        <BackgroundImage :modelValue="modelValue.body" />
        <Border :modelValue="modelValue.body" label="Body Border" />
    </Panel>

    <Panel v-model="isTextStylingExpanded"
           :hasCollapse="true"
           title="Text Styling">
        <FontStyleSheet :modelValue="modelValue.body"
                        label="Heading 1"
                        tagName="h1" />
        <hr>
        <FontStyleSheet :modelValue="modelValue.body"
                        label="Heading 2"
                        tagName="h2" />
        <hr>
        <FontStyleSheet :modelValue="modelValue.body"
                        label="Heading 3"
                        tagName="h3" />
        <hr>
        <FontStyleSheet :modelValue="modelValue.body"
                        label="Paragraph"
                        tagName="p" />
    </Panel>

    <Panel v-model="isDefaultButtonStylingExpanded"
           :hasCollapse="true"
           title="Default Button Styling">
        <ButtonStyleSheet :modelValue="modelValue.body" />
    </Panel>

    <Panel v-model="isDividerStylingExpanded"
           :hasCollapse="true"
           title="Divider Styling">
        <DividerStyleSheet :modelValue="modelValue.body" />
    </Panel>
</template>

<style scoped>
:deep(.panel) {
    margin-bottom: 0;
}
</style>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import BackgroundColor from "./inlineStyleEditors/backgroundColor.partial.obs";
    import BackgroundImage from "./inlineStyleEditors/backgroundImage.partial.obs";
    import Border from "./inlineStyleEditors/border.partial.obs";
    import Width from "./inlineStyleEditors/width.partial.obs";
    import ButtonStyleSheet from "./styleSheetEditors/button.partial.obs";
    import DividerStyleSheet from "./styleSheetEditors/divider.partial.obs";
    import FontStyleSheet from "./styleSheetEditors/font.partial.obs";
    import Panel from "@Obsidian/Controls/panel.obs";

    defineProps({
        /** This should be a body element. */
        modelValue: {
            type: Object as PropType<Document>,
            required: true
        }
    });

    // #region Values

    const isGeneralSettingsExpanded = ref<boolean>(true);
    const isTextStylingExpanded = ref<boolean>(false);
    const isDefaultButtonStylingExpanded = ref<boolean>(false);
    const isDividerStylingExpanded = ref<boolean>(false);

    // #endregion

    // #region Watchers

    watch(isGeneralSettingsExpanded, isExpanded => {
        if (isExpanded) {
            // Collapse other sections.
            isTextStylingExpanded.value = false;
            isDefaultButtonStylingExpanded.value = false;
            isDividerStylingExpanded.value = false;
        }
    }, {
        // This is the only expansion watcher that should run immediately.
        immediate: true
    });

    watch(isTextStylingExpanded, isExpanded => {
        if (isExpanded) {
            // Collapse other sections.
            isGeneralSettingsExpanded.value = false;
            isDefaultButtonStylingExpanded.value = false;
            isDividerStylingExpanded.value = false;
        }
    });

    watch(isDefaultButtonStylingExpanded, isExpanded => {
        if (isExpanded) {
            // Collapse other sections.
            isGeneralSettingsExpanded.value = false;
            isTextStylingExpanded.value = false;
            isDividerStylingExpanded.value = false;
        }
    });

    watch(isDividerStylingExpanded, isExpanded => {
        if (isExpanded) {
            // Collapse other sections.
            isGeneralSettingsExpanded.value = false;
            isTextStylingExpanded.value = false;
            isDefaultButtonStylingExpanded.value = false;
        }
    });

    // #endregion
</script>