<template>
    <template v-if="headingElement">
        <Panel v-model="isGeneralSettingsExpanded"
               :hasCollapse="true"
               title="General Settings">
            <TextContent :modelValue="headingElement" />

            <DropDownList v-model="headingLevel"
                          :items="headingLevels"
                          label="Level"
                          :showBlankItem="false" />
        </Panel>

        <Panel v-model="isTextStylingExpanded" :hasCollapse="true"
               title="Text Styling">
            <Font :modelValue="headingElement"
                  :tagName="headingLevel" />
        </Panel>
    </template>
</template>

<style scoped>
:deep(.panel) {
    margin-bottom: 0;
}
</style>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { DropDownList } from "./imports.partial";
    import { EditorComponent } from "./types.partial";
    import Font from "./inlineStyleEditors/font.partial.obs";
    import TextContent from "./propertyEditors/textContent.partial.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<EditorComponent>,
            required: true
        }
    });

    const headingLevels: ListItemBag[] = [
        {
            text: "Heading 1",
            value: "h1"
        }, {
            text: "Heading 2",
            value: "h2"
        }, {
            text: "Heading 3",
            value: "h3"
        }, {
            text: "Heading 4",
            value: "h4"
        }, {
            text: "Heading 5",
            value: "h5"
        }, {
            text: "Heading 6",
            value: "h6"
        },
    ];

    type HeadingLevel = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";

    // #region Values

    const headingElement = ref<HTMLHeadingElement | null | undefined>(getHeadingElement());
    const headingLevel = ref<HeadingLevel>(headingElement.value?.tagName?.toLowerCase() as HeadingLevel ?? "h1");
    const isGeneralSettingsExpanded = ref<boolean>(true);
    const isTextStylingExpanded = ref<boolean>(false);

    // #endregion

    // #region Functions

    function getHeadingElement(): HTMLHeadingElement | null {
        return props.modelValue.componentElement?.querySelector("h1,h2,h3,h4,h5,h6") ?? null;
    }

    // #endregion

    // #region Watchers

    watch(headingLevel, (value: HeadingLevel) => {
        if (!value || !headingElement.value || headingElement.value?.tagName.toLowerCase() === value) {
            // No need to change heading level.
            return;
        }

        const newHeadingElement = props.modelValue.componentElement.ownerDocument.createElement(value);

        // Copy attributes from old to new heading element.
        [...headingElement.value.attributes].forEach(attr => {
            newHeadingElement.setAttribute(attr.name, attr.value);
        });

        // Copy the inner content from old to new heading element.
        newHeadingElement.innerHTML = headingElement.value.innerHTML;

        // Replace the old heading element with the new one.
        headingElement.value.parentNode?.replaceChild(newHeadingElement, headingElement.value);

        headingElement.value = newHeadingElement;
    });

    watch(isGeneralSettingsExpanded, isExpanded => {
        if (isExpanded) {
            // Collapse other panels.
            isTextStylingExpanded.value = false;
        }
    });

    watch(isTextStylingExpanded, isExpanded => {
        if (isExpanded) {
            // Collapse other panels.
            isGeneralSettingsExpanded.value = false;
        }
    });

    // #endregion
</script>