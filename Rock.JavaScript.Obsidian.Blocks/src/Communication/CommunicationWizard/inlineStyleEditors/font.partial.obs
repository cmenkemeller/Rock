<template>
    <DropDownList v-model="fontFamily"
                  :items="fontFamilies"
                  :label="label" />

    <NumberBox v-model="fontSize" :disableLabel="true" placeholder="Font Size (px)" />

    <ColorPicker v-model="fontColor" :disableLabel="true" placeholder="Font Color" />

    <MultiSelectButtonGroup v-model="fontStyleGroup" :disableLabel="true">
        <template #default="{ btnSize, disabled, itemButtonType, toggleValue }">
            <RockButton :disabled="disabled"
                        :btnSize="btnSize"
                        :btnType="itemButtonType('bold')"
                        @click="toggleValue('bold')"><i class="fa fa-bold"></i></RockButton>
            <RockButton :disabled="disabled"
                        :btnSize="btnSize"
                        :btnType="itemButtonType('underline')"
                        @click="toggleValue('underline')"><i class="fa fa-underline"></i></RockButton>
            <RockButton :disabled="disabled"
                        :btnSize="btnSize"
                        :btnType="itemButtonType('italic')"
                        @click="toggleValue('italic')"><i class="fa fa-italic"></i></RockButton>
        </template>
    </MultiSelectButtonGroup>

    <LineHeight :modelValue="modelValue" />

    <SingleSelectButtonGroup v-model="textTransform" :disableLabel="true">
        <template #default="{ btnSize, disabled, itemButtonType, toggleValue: selectValue }">
            <RockButton :disabled="disabled"
                        :btnSize="btnSize"
                        :btnType="itemButtonType('capitalize')"
                        title="Capitalize"
                        @click="selectValue('capitalize')">Ag</RockButton>

            <RockButton :disabled="disabled"
                        :btnSize="btnSize"
                        :btnType="itemButtonType('lowercase')"
                        title="Lowercase"
                        @click="selectValue('lowercase')">ag</RockButton>

            <RockButton :disabled="disabled"
                        :btnSize="btnSize"
                        :btnType="itemButtonType('uppercase')"
                        title="Uppercase"
                        @click="selectValue('uppercase')">AG</RockButton>
        </template>
    </SingleSelectButtonGroup>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import LineHeight from "./lineHeight.partial.obs";
    import { ColorPicker, DropDownList, NumberBox, RockButton } from "../imports.partial";
    import MultiSelectButtonGroup from "../multiSelectButtonGroup.partial.obs";
    import SingleSelectButtonGroup from "../singleSelectButtonGroup.partial.obs";
    import { useFontFamilies } from "../utils.partial";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<HTMLElement>,
            required: true
        },
        label: {
            type: String as PropType<string>,
            default: "Font"
        }
    });

    const fontFamilies = useFontFamilies();

    // #region Values

    // These are initialized in the "immediate" props.modelValue watcher below.
    const fontFamily = ref<string>("");
    const fontColor = ref<string>("");
    const fontSize = ref<number | null | undefined>();
    const fontStyleGroup = ref<("bold" | "underline" | "italic")[]>([]);
    const textTransform = ref<string>("");

    // #endregion

    // #region Watchers

    watch(() => props.modelValue, () => {
        fontFamily.value = props.modelValue.style.fontFamily;
        fontColor.value = props.modelValue.style.color;
        fontSize.value = props.modelValue.style.fontSize ? parseInt(props.modelValue.style.fontSize) : null;

        const temp: ("bold" | "underline" | "italic")[] = [];
        if (props.modelValue.style.fontWeight) {
            temp.push("bold");
        }
        if (props.modelValue.style.fontStyle === "italic") {
            temp.push("italic");
        }
        if (props.modelValue.style.textDecoration === "underline") {
            temp.push("underline");
        }
        fontStyleGroup.value = temp;

        textTransform.value = props.modelValue.style.textTransform;
    }, {
        // Since the reactive values are not initialized where defined above,
        // this needs to be immediate here.
        immediate: true
    });

    watch(fontFamily, (value: string) => {
        props.modelValue.style.fontFamily = value;
    });

    watch(fontColor, (value: string) => {
        props.modelValue.style.color = value;
    });

    watch(fontSize, value => {
        if (value) {
            props.modelValue.style.fontSize = `${fontSize.value}px`;
        }
        else {
            props.modelValue.style.fontSize = "";
        }
    });

    watch(fontStyleGroup, value => {
        if (value.includes("bold")) {
            props.modelValue.style.fontWeight = "bold";
        }
        else {
            props.modelValue.style.fontWeight = "";
        }

        if (value.includes("italic")) {
            props.modelValue.style.fontStyle = "italic";
        }
        else {
            props.modelValue.style.fontStyle = "";
        }

        if (value.includes("underline")) {
            props.modelValue.style.textDecoration = "underline";
        }
        else {
            props.modelValue.style.textDecoration = "";
        }
    });

    watch(textTransform, (value: string) => {
        props.modelValue.style.textTransform = value;
    });

    // #endregion
</script>
