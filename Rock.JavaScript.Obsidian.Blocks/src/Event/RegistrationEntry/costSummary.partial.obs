<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Loading :isLoading="isLoading">
        <div class="fee-table">
            <div class="row hidden-xs fee-header">
                <div :class="{ 'col-sm-6': hasDiscount, 'col-sm-9': !hasDiscount }">
                    <strong>Description</strong>
                </div>
                <div class="col-sm-3 fee-value">
                    <strong>Amount</strong>
                </div>
                <div v-if="hasDiscount" class="col-sm-3 fee-value">
                    <strong>Discounted Amount</strong>
                </div>
            </div>
            <div v-for="lineItem in augmentedLineItems" class="row" :class="lineItem.isFee ? 'fee-row-fee' : 'fee-row-cost'">
                <div :class="{ 'col-sm-6 fee-caption': hasDiscount, 'col-sm-9 fee-caption': !hasDiscount }">
                    {{ lineItem.description }} {{ registrationEntryState.viewModel.isPaymentPlanConfigured ? "(Payment Plan)" : "" }}
                </div>
                <div class="col-sm-3 fee-value">
                    <span class="visible-xs-inline">Amount:</span>
                    {{ `${currencyInfo.symbol} ${lineItem.amountFormatted}` }}
                </div>
                <div v-if="hasDiscount" class="col-sm-3 fee-value">
                    <HelpBlock v-if="lineItem.discountHelp" :text="lineItem.discountHelp" />
                    <span class="visible-xs-inline">Discounted Amount:</span>
                    {{ `${currencyInfo.symbol} ${lineItem.discountedAmountFormatted}` }}
                </div>
            </div>
            <div class="row fee-row-total">
                <div :class="{ 'col-sm-6 fee-caption': hasDiscount, 'col-sm-9 fee-caption': !hasDiscount }">
                    Total
                </div>
                <div class="col-sm-3 fee-value">
                    <span class="visible-xs-inline">Amount:</span>
                    {{ totalFormatted }}
                </div>
                <div v-if="hasDiscount" class="col-sm-3 fee-value">
                    <span class="visible-xs-inline">Discounted Amount:</span>
                    {{ discountedTotalFormatted }}
                </div>
            </div>
        </div>
        <div class="row fee-totals">
            <div class="col-sm-offset-8 col-sm-4 fee-totals-options">
                <div class="form-group static-control">
                    <label class="control-label">Total Cost</label>
                    <div class="control-wrapper">
                        <div class="form-control-static">
                            {{ discountedTotalFormatted }}
                        </div>
                    </div>
                </div>

                <div v-if="amountPreviouslyPaid" class="form-group static-control">
                    <label class="control-label">Previously Paid</label>
                    <div class="control-wrapper">
                        <div class="form-control-static">
                            {{ amountPreviouslyPaidFormatted }}
                        </div>
                    </div>
                </div>

                <div v-if="registrationEntryState.viewModel.session?.paymentPlan" class="form-group static-control">
                    <label class="control-label">Payment Plan</label>
                    <div class="control-wrapper">
                        <div class="form-control-static">
                            {{ formatCurrency(registrationEntryState.viewModel.session.paymentPlan.amountPerPayment, registrationEntryState.viewModel.currencyInfo) }} x {{ registrationEntryState.viewModel.session.paymentPlan.remainingNumberOfPayments }} ({{ registrationEntryState.viewModel.session.paymentPlan.transactionFrequencyText }})
                        </div>
                    </div>
                </div>

                <template v-if="showAmountDueToday && maxAmountCanBePaid && !isPaymentPlanConfigured">
                    <div class="form-group static-control">
                        <label class="control-label">Minimum Due Today</label>
                        <div class="control-wrapper">
                            <div class="form-control-static">
                                {{ amountDueTodayFormatted }}
                            </div>
                        </div>
                    </div>

                    <CurrencyBox label="Amount To Pay Today"
                                 :rules="amountToPayTodayRules"
                                 v-model="registrationEntryState.amountToPayToday"
                                 formGroupClasses="form-right"
                                 inputGroupClasses="input-width-md amount-to-pay" />

                    <div class="form-group static-control">
                        <label class="control-label">Amount Remaining After Payment</label>
                        <div class="control-wrapper">
                            <div class="form-control-static">
                                {{ amountRemainingFormatted }}
                            </div>
                        </div>
                    </div>

                    <div v-if="isPaymentPlanConfigurationSupported && !isPaymentPlanConfigured && !registrationEntryState.viewModel.session?.paymentPlan" class="form-group">
                        <RockButton btnType="default" btnSize="xs" @click="onConfigurePaymentPlanClicked">Configure a Payment Plan</RockButton>
                    </div>
                </template>

                <div v-else class="form-group static-control">
                    <label class="control-label">Amount Due</label>
                    <div class="control-wrapper">
                        <div class="form-control-static">
                            {{ maxAmountCanBePaidFormatted }}
                        </div>
                    </div>
                </div>

                <div v-if="isPaymentPlanConfigured" class="payment-plan well">
                    <RockLabel class="primary-label">Payment Plan</RockLabel>
                    <StaticFormControl label="Amount Due Today" :modelValue="formatCurrency(registrationEntryState.amountToPayToday, registrationEntryState.viewModel.currencyInfo)" />
                    <StaticFormControl :label="`${registrationEntryState.paymentPlan?.transactionFrequencyText} Payment Amount`" :modelValue="`${formatCurrency(registrationEntryState.paymentPlan?.amountPerPayment ?? 0, registrationEntryState.viewModel.currencyInfo)} x ${registrationEntryState.paymentPlan?.numberOfPayments ?? 0}`" />
                    <RockButton v-if="isPaymentPlanConfigurationSupported" btnType="default" btnSize="xs" @click="onConfigurePaymentPlanClicked">Change</RockButton>
                    <RockButton v-if="isPaymentPlanConfigurationSupported" btnType="link" btnSize="xs" @click="onUnconfigurePaymentPlanClicked">Cancel</RockButton>
                </div>
            </div>
        </div>
    </Loading>

    <ConfigurePaymentPlanModal v-if="isPaymentPlanConfigurationSupported"
                               v-model="isConfigurePaymentPlanModalShown"
                               :paymentPlanFrequencies="paymentPlanFrequencies" />
</template>

<style scoped>
.payment-plan :deep(.control-label:not(.primary-label)) {
    font-weight: normal;
}
</style>

<script setup lang="ts">
    import { computed, nextTick, ref, watch } from "vue";
    import { GetPersistSessionArgs, CurrentRegistrationEntryState, use, RegistrationCostSummary, formatCurrency, PaymentPlanFrequency, getPaymentPlanFrequency } from "./utils.partial";
    import CurrencyBox from "@Obsidian/Controls/currencyBox.obs";
    import HelpBlock from "@Obsidian/Controls/helpBlock.obs";
    import Loading from "@Obsidian/Controls/loading.obs";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { ValidationRule } from "@Obsidian/ValidationRules";
    import { RegistrationEntryCostSummaryBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryCostSummaryBag";
    import StaticFormControl from "@Obsidian/Controls/staticFormControl.obs";
    import { CurrencyInfoBag } from "@Obsidian/ViewModels/Utility/currencyInfoBag";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import ConfigurePaymentPlanModal from "./configurePaymentPlanModal.partial.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { DefinedValue } from "@Obsidian/SystemGuids/definedValue";

    enum RegistrationCostSummaryType {
        Cost = 0,
        Fee = 1,
        Discount = 2,
        Total = 3
    }

    type AugmentedLineItem = RegistrationEntryCostSummaryBag & {
        isFee: boolean;
        discountHelp: string;
        discountedAmountFormatted: string;
        amountFormatted: string;
    };

    const getRegistrationEntryBlockArgs = use(GetPersistSessionArgs);
    const invokeBlockAction = useInvokeBlockAction();
    const registrationEntryState = use(CurrentRegistrationEntryState);
    const { updateRegistrationCostSummary } = use(RegistrationCostSummary);

    // #region Values

    const isLoading = ref<boolean>(false);
    const lineItems = ref<RegistrationEntryCostSummaryBag[]>([]);
    const isConfigurePaymentPlanModalShown = ref<boolean>(false);
    const isPaymentPlanConfigured = ref<boolean>(!!registrationEntryState.paymentPlan?.numberOfPayments && !!registrationEntryState.paymentPlan?.amountPerPayment);

    // #endregion

    // #region Computed Values

    /** Gets the valid payment plan frequencies. */
    const paymentPlanFrequencies = computed<PaymentPlanFrequency[]>(() => {
        const paymentPlanDeadlineDate: RockDateTime | null = RockDateTime.parseISO(registrationEntryState.viewModel.paymentDeadlineDate || "");
        if (!paymentPlanDeadlineDate) {
            // The payment plan deadline date is required to calculate
            // the max number of payments per payment plan frequency.
            // If there is no deadline date, then return an empty array.
            return [];
        }

        const frequencies = (registrationEntryState.viewModel.paymentPlanFrequencies ?? [])
            .map(listItemBag => getPaymentPlanFrequency(listItemBag, paymentPlanDeadlineDate))
            // Only return frequencies that can make at least
            // two payments for the given payment plan start date.
            .filter(frequency => frequency.maxNumberOfPayments >= 2);

        // Sort the frequencies.
        const rank: Record<string, number> = {
            [DefinedValue.TransactionFrequencyWeekly]: 1,
            [DefinedValue.TransactionFrequencyBiweekly]: 2,
            [DefinedValue.TransactionFrequencyFirstAndFifteenth]: 3,
            [DefinedValue.TransactionFrequencyTwicemonthly]: 4,
            [DefinedValue.TransactionFrequencyMonthly]: 5,
            [DefinedValue.TransactionFrequencyQuarterly]: 6,
            [DefinedValue.TransactionFrequencyTwiceyearly]: 7,
            [DefinedValue.TransactionFrequencyOneTime]: 8,
        };

        frequencies.sort((a, b): number => {
            const aOrder = a.listItemBag.value ? rank[a.listItemBag.value] : -1;
            const bOrder = b.listItemBag.value ? rank[b.listItemBag.value] : -1;

            return aOrder < bOrder ? -1 : bOrder < aOrder ? 1 : 0;
        });

        return frequencies;
    });

    /** Gets whether or not the payment plan feature can be shown. */
    const isPaymentPlanConfigurationSupported = computed<boolean>(() => {
        return paymentPlanFrequencies.value.length > 0;
    });

    const currencyInfo = computed<CurrencyInfoBag>(() => {
        return registrationEntryState.viewModel.currencyInfo ?? {
            decimalPlaces: 2,
            symbol: "$"
        };
    });

    /** Line items with some extra info computed for table rendering */
    const augmentedLineItems = computed<AugmentedLineItem[]>(() => {
        return lineItems.value.map(li => ({
            ...li,
            isFee: li.type === RegistrationCostSummaryType.Fee,
            discountHelp: (hasDiscount.value && li.cost === li.discountedCost) ? "This item is not eligible for the discount." : "",
            // Ignore the currency symbol when formatting.
            // It will be prepended with a space in the template.
            amountFormatted: formatCurrency(li.cost, { symbol: "" }),
            discountedAmountFormatted: formatCurrency(li.discountedCost, { symbol: "" })
        } as AugmentedLineItem));
    });

    /** Should the discount column in the fee table be shown? */
    const hasDiscount = computed<boolean>(() => {
        return lineItems.value.some(li => li.discountedCost !== li.cost);
    });

    /** The total cost before discounts */
    const total = computed<number>(() => {
        let total = 0;
        lineItems.value.forEach(li => total += li.cost);
        return total;
    });

    /** The total before discounts as a formatted string */
    const totalFormatted = computed<string>(() => {
        return formatCurrency(total.value, registrationEntryState.viewModel.currencyInfo);
    });

    /** The total cost before discounts */
    const defaultPaymentAmount = computed<number>(() => {
        let total = 0;
        let hasDefault = false;

        lineItems.value.forEach(li => {
            if (li.defaultPaymentAmount) {
                hasDefault = true;
                total += li.defaultPaymentAmount;
            }
        });

        total = hasDefault ? total : maxAmountCanBePaid.value;

        if (total > maxAmountCanBePaid.value) {
            total = maxAmountCanBePaid.value;
        }

        if (total < amountDueToday.value) {
            total = amountDueToday.value;
        }

        if (total < 0) {
            total = 0;
        }

        return total;
    });

    /** The total cost after discounts */
    const discountedTotal = computed<number>(() => {
        let total = 0;
        lineItems.value.forEach(li => total += li.discountedCost);
        return total;
    });

    /** The total after discounts as a formatted string */
    const discountedTotalFormatted = computed<string>(() => {
        return formatCurrency(discountedTotal.value, registrationEntryState.viewModel.currencyInfo);
    });

    /** The min amount that must be paid today */
    const amountDueToday = computed<number>(() => {
        if (amountPreviouslyPaid.value) {
            return 0;
        }

        let total = 0;
        lineItems.value.forEach(li => total += (Math.min(li.minimumPaymentAmount, li.discountedCost)));
        return total;
    });

    /** The min amount that must be paid today as a formatted string */
    const amountDueTodayFormatted = computed<string>(() => {
        return formatCurrency(amountDueToday.value, registrationEntryState.viewModel.currencyInfo);
    });

    /** Should the amount that is due today be shown */
    const showAmountDueToday = computed<boolean>(() => {
        return amountDueToday.value !== discountedTotal.value;
    });

    /** The amount previously paid */
    const amountPreviouslyPaid = computed<number>(() => {
        return registrationEntryState.viewModel.session?.previouslyPaid || 0;
    });

    /** The amount previously paid formatted as a string */
    const amountPreviouslyPaidFormatted = computed<string>(() => {
        return formatCurrency(amountPreviouslyPaid.value, registrationEntryState.viewModel.currencyInfo);
    });

    /** The max amount that can be paid today */
    const maxAmountCanBePaid = computed<number>(() => {
        // The max amount is the discounted total less the previously paid amount and any planned payment amount.
        const plannedPaymentAmount = registrationEntryState.viewModel.session?.paymentPlan?.remainingPlannedAmount ?? 0;
        const balance = discountedTotal.value - amountPreviouslyPaid.value - plannedPaymentAmount;

        if (balance > 0) {
            return balance;
        }
        return 0;
    });

    /** The max amount that can be paid today as a formatted string */
    const maxAmountCanBePaidFormatted = computed<string>(() => {
        return formatCurrency(maxAmountCanBePaid.value, registrationEntryState.viewModel.currencyInfo);
    });

    /** The amount that would remain if the user paid the amount indicated in the currency box */
    const amountRemaining = computed<number>(() => {
        const actual = maxAmountCanBePaid.value - registrationEntryState.amountToPayToday;
        const bounded = actual < 0 ? 0 : actual > maxAmountCanBePaid.value ? maxAmountCanBePaid.value : actual;
        return bounded;
    });

    /** The amount that would remain if the user paid the amount indicated in the currency box as a formatted string */
    const amountRemainingFormatted = computed<string>(() => {
        return formatCurrency(amountRemaining.value, registrationEntryState.viewModel.currencyInfo);
    });

    /** The vee-validate rules for the amount to pay today */
    const amountToPayTodayRules = computed<ValidationRule[]>(() => {
        const rules: ValidationRule[] = [];
        let min = amountDueToday.value;
        const max = maxAmountCanBePaid.value;

        if (min > max) {
            min = max;
        }

        if (min > 0) {
            rules.push("required");
        }
        else {
            rules.push("notblank");
        }

        rules.push(`gte:${min}`);
        rules.push(`lte:${max}`);

        return rules;
    });

    // #endregion

    // #region Functions

    /** Retrieve the line item costs from the server */
    async function fetchData(): Promise<void> {
        isLoading.value = true;
        lineItems.value = [];

        try {
            const response = await invokeBlockAction<RegistrationEntryCostSummaryBag[]>("CalculateCost", {
                args: getRegistrationEntryBlockArgs()
            });

            if (response.data) {
                lineItems.value = response.data;
            }
        }
        finally {
            isLoading.value = false;
        }

        // Update the shared registration cost data.
        updateRegistrationCostSummary({
            paidAmount: amountPreviouslyPaid.value,
            remainingAmount: amountRemaining.value,
            minimumRemainingAmount: amountDueToday.value
        });
    }

    // #endregion

    // #region Event Handlers

    function onConfigurePaymentPlanClicked(): void {
        // Open the modal on the next tick to avoid situations where the modal cannot be reopened.
        nextTick(() => {
            isConfigurePaymentPlanModalShown.value = true;
        });
    }

    function onUnconfigurePaymentPlanClicked(): void {
        // Open the modal on the next tick to avoid situations where the modal cannot be reopened.
        registrationEntryState.paymentPlan = null;
    }

    // #endregion

    // #region Watchers

    watch(
        [
            () => registrationEntryState.paymentPlan?.transactionFrequencyGuid,
            () => registrationEntryState.paymentPlan?.amountPerPayment,
            () => registrationEntryState.paymentPlan?.numberOfPayments
        ],
        () => {
            isPaymentPlanConfigured.value =
                !!registrationEntryState?.paymentPlan?.numberOfPayments
                && !!registrationEntryState.paymentPlan.amountPerPayment;
        });

    watch(defaultPaymentAmount, () => {
        // The amountToPayToday is set here on load of the summary.partial.obs component via this child component.
        registrationEntryState.amountToPayToday = defaultPaymentAmount.value;
    }, {
        immediate: true
    });

    watch(() => registrationEntryState.discountCode, async (): Promise<void> => {
        await fetchData();
    });

    // #endregion

    fetchData();
</script>