<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="isInactiveGatewayNotificationVisible"
                     alertType="warning"
                     heading="Inactive Gateways">
        Inactive gateways will not be selectable when configuring new configurations, but will continue to process payments where used. Consider blanking out the configured values if you would like to ensure that inactive gateways no longer work.
    </NotificationBox>

    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Gateway"
          :entityTypeGuid="EntityType.FinancialGateway"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          :showLaunchWorkflow="enableWorkflowLauncher"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="entityType"
                    title="Gateway Type"
                    field="entityType"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       :filter="booleanValueFilter"
                       visiblePriority="xs" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { BooleanColumn, TextColumn, textValueFilter, DeleteColumn, booleanValueFilter } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { FinancialGatewayListOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/FinancialGatewayList/financialGatewayListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./FinancialGatewayList/types.partial";
    import { reactive, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";

    const config = useConfigurationValues<ListBlockBox<FinancialGatewayListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    const isInactiveGatewayNotificationVisible = ref(config.options?.isInactiveGatewayNotificationVisible);
    const enableWorkflowLauncher = ref(config.options?.enableWorkflowLauncher);
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete financial gateway.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();

    onConfigurationValuesChanged(useReloadBlock());

</script>
