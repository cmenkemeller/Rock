<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <Block v-if="!blockError" :title="config?.title ?? 'Asset Manager'" hasFullscreen>
        <AssetAndFileManager v-model:openFolders="openFolders"
                             :height="height"
                             :enableAssetManager="config?.enableAssetProviders ?? true"
                             :enableFileManager="config?.enableFileManager ?? false"
                             :enableZipUpload="config?.enableZipUploader ?? false"
                             :encryptedRootFolder="config?.rootFolder ?? undefined"
                             :editFilePage="config?.fileEditorPage ?? undefined" />
    </Block>
</template>

<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import AssetAndFileManager from "@Obsidian/Controls/assetAndFileManager.obs";
    import Block from "@Obsidian/Templates/block";
    import { useConfigurationValues, usePersonPreferences, useInvokeBlockAction, onConfigurationValuesChanged, useReloadBlock } from "@Obsidian/Utility/block";
    import { PreferenceKey } from "./AssetManager/types.partial";
    import { AssetManagerOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/AssetManager/assetManagerOptionsBag";

    const config = useConfigurationValues<AssetManagerOptionsBag>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const preferences = usePersonPreferences().blockPreferences;
    let openFolderPreference: string[];

    try {
        openFolderPreference = JSON.parse(preferences.getValue(PreferenceKey.OpenFolders));
    }
    catch (e) {
        openFolderPreference = [];
    }

    const openFolders = ref<string[]>(openFolderPreference ?? []);

    // #endregion

    // #region Computed Values

    const height = computed(() => {
        if (config.isStaticHeight && config.height) {
            return config.height;
        }
        else {
            return "flexible";
        }
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // #region Watchers

    watch(openFolders, () => {
        preferences.setValue(PreferenceKey.OpenFolders, JSON.stringify(openFolders.value));
        preferences.save();
    });

    // #endregion

    onConfigurationValuesChanged(useReloadBlock());
</script>
