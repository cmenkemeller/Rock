name: CI

on:
  push:
    branches:
      - ci-cd-2

jobs:
  build:
    runs-on: windows-2022 # Target the latest stable Windows runner explicitly

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js (Install npm and Node.js)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'  # specify a specific version (e.g., 14, 16, or 18)

       # Step 4: Install Node.js dependencies (npm install)
      - name: Install npm dependencies
        run: npm install
     
      # Step:5 Install TypeScript globally
      - name: Install TypeScript globally
        run: npm install -g typescript

      # Step 6: Copy .NET Facades (preserved from the previous workflow)
      - name: Copy .NET Facades
        shell: pwsh # Use PowerShell as shell
        run: |
          $facadesPath = Join-Path ([Environment]::GetFolderPath("ProgramFilesX86")) "Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\Facades"
          $destPath = Join-Path ([Environment]::GetFolderPath("ProgramFilesX86")) "Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2"
          Get-ChildItem $facadesPath | Copy-Item -Destination $destPath -Force

      # Step 7: Restore NuGet Packages for the solution
      - name: Restore NuGet Packages
        run: nuget restore Rock.sln

      # Step 8: Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Step 9: Build the solution using MSBuild
      - name: Build with MSBuild
        run: |
          msbuild Rock.sln -t:Clean,Build -p:Configuration=Release

      # Step 10: Upload Build Artifacts (binary outputs)
      - name: Upload Build Artifacts
        if: always() # Ensure artifacts are uploaded even if the build fails
        uses: actions/upload-artifact@v4
        with:
          name: BuildOutput
          path: |
            ./RockWeb/bin
            ./RockWeb/obj
