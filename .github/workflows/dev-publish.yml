name: CI/CD for Rock RMS

on:
  push:
    branches:
      - ci-cd-2

jobs:
  build:
    runs-on: windows-2022
    strategy:
      matrix:
        configuration: [Release]
        platform: [Any CPU]
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # equivalent to clone_depth: 1

      # Step 2: Set up SSH Key (similar to the AppVeyor script install step)
      # - name: Set up SSH Key
      #   shell: pwsh
      #   run: |
      #     $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
      #     $fileContent += $env:priv_key.Replace(' ', "`n")
      #     $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
      #     Set-Content $HOME\.ssh\id_rsa $fileContent

      # Step 3: Restore NuGet Packages
      - name: Restore NuGet packages
        run: nuget restore Rock.sln

      # # Step 4: Modify web.config (before_build step in AppVeyor)
      # - name: Modify web.config
      #   shell: pwsh
      #   run: |
      #    (Get-Content "$Env:GITHUB_WORKSPACE\RockWeb\web.config").Replace('<compilation debug="true"', '<compilation debug="false"') |
      #     Set-Content "$Env:GITHUB_WORKSPACE\RockWeb\web.config"

      # Step 4: Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Find and Copy .dll files to RockWeb/Bin
        shell: pwsh
        run: |
          # Find all .dll files in the packages folder
          $dlls = Get-ChildItem -Path "Rock/packages" -Recurse -Filter "*.dll"

          # Copy each DLL to the RockWeb/Bin directory
          foreach ($dll in $dlls) {
            Write-Host "Copying: $($dll.FullName)"
            Copy-Item -Path $dll.FullName -Destination "RockWeb/Bin" -Force
          }

          Write-Host "All DLLs copied to RockWeb/Bin"

      # Step 5: Build the solution using MSBuild
      - name: Build with MSBuild
        run: |
          msbuild Rock.sln /p:Configuration=Release

      # Step 6: Run Tests
      # - name: Run Tests
      #   run: |
      #    vstest.console.exe Rock.Tests.dll

      # Step 7: Cache Node_modules or NuGet packages (optional, if needed)
      # Uncomment if needed for caching NuGet packages or Node_modules
      # - name: Cache NuGet or Node_modules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #       **/packages
      #     key: ${{ runner.os }}-build-cache

      # Step: List the files in RockWeb/Bin
      - name: List files in RockWeb/Bin
        if: always()
        run: |
          dir RockWeb\Bin

      # Step 8: Upload Artifacts (for IIS deployment or further inspection)
      - name: Upload RockWeb Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BuildOutput
          path: |
            ./RockWeb/bin
            ./RockWeb/Bin
