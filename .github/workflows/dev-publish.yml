name: CI/CD for Rock RMS

on:
  push:
    branches:
      - ci-cd-2

jobs:
  build:
    runs-on: windows-2019
    strategy:
      matrix:
        configuration: [Release]
        platform: [Any CPU]
    steps:

      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # equivalent to clone_depth: 1

      # Step 2: Set up SSH Key (similar to the AppVeyor script install step)
      # - name: Set up SSH Key
      #   shell: pwsh
      #   run: |
      #     $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
      #     $fileContent += $env:priv_key.Replace(' ', "`n")
      #     $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
      #     Set-Content $HOME\.ssh\id_rsa $fileContent

      - name: List IDE directory
        run: |
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\"

      - name: List IDE directory
        run: |
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\"

      - name: Restore NuGet packages
        run: nuget restore Rock.sln
        working-directory: D:\a\Rock\Rock

      
      - name: Modify Visual Studio 2022
        shell: pwsh
        working-directory: C:\Program Files
        run: |
          Start-Process -FilePath "\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe"

      - name: Build Release
        shell: pwsh
        run: |
          msbuild Rock.sln /p:Configuration=Release
      
      # # Step 4: Modify web.config (before_build step in AppVeyor)
      # - name: Modify web.config
      #   shell: pwsh
      #   run: |
      #    (Get-Content "$Env:GITHUB_WORKSPACE\RockWeb\web.config").Replace('<compilation debug="true"', '<compilation debug="false"') |
      #     Set-Content "$Env:GITHUB_WORKSPACE\RockWeb\web.config"

      # # Step 4: Setup MSBuild
      # - name: Setup MSBuild
      #   uses: microsoft/setup-msbuild@v2

      # - name: Find and Copy DDay.iCal.dll to RockWeb/Bin
      #   shell: pwsh
      #   run: |
      #     # Search for the DDay.iCal package folder in the "packages" directory
      #     $ddayPath = Get-ChildItem -Path "packages" -Recurse -Filter "DDay.iCal*.dll" | Select-Object -First 1

      #     # If DDay.iCal.dll is found, copy it to RockWeb/Bin
      #     if ($ddayPath) {
      #         Write-Host "Found DDay.iCal.dll at: $($ddayPath.FullName)"
      #         Copy-Item -Path $ddayPath.FullName -Destination "RockWeb/Bin/DDay.iCal.dll" -Force
      #     } else {
      #         Write-Host "DDay.iCal.dll not found"
      #         exit 1
      #     }
   
      # - name: Find and Copy RestSharp.dll to RockWeb/Bin
      #   shell: pwsh
      #   run: |
      #     # Search for the RestSharp package folder in the "packages" directory
      #     $restSharpPath = Get-ChildItem -Path "packages" -Recurse -Filter "RestSharp.dll" | Where-Object { $_.FullName -match "lib\\net46" } | Select-Object -First 1

      #     # If RestSharp.dll is found, copy it to RockWeb/Bin
      #     if ($restSharpPath) {
      #         Write-Host "Found RestSharp.dll at: $($restSharpPath.FullName)"
      #         Copy-Item -Path $restSharpPath.FullName -Destination "RockWeb/Bin/RestSharp.dll" -Force
      #     } else {
      #         Write-Host "RestSharp.dll not found"
      #         exit 1
      #     }

      # - name: Find and Copy EntityFramework.dll to RockWeb/Bin
      #   shell: pwsh
      #   run: |
      #     # Search for the EntityFramework package folder in the "packages" directory
      #     $entityFrameworkPath = Get-ChildItem -Path "packages" -Recurse -Filter "EntityFramework.dll" | Where-Object { $_.FullName -match "lib\\net45" } | Select-Object -First 1

      #     # If EntityFramework.dll is found, copy it to RockWeb/Bin
      #     if ($entityFrameworkPath) {
      #       Write-Host "Found EntityFramework.dll at: $($entityFrameworkPath.FullName)"
      #       Copy-Item -Path $entityFrameworkPath.FullName -Destination "RockWeb/Bin/EntityFramework.dll" -Force
      #     } else {
      #       Write-Host "EntityFramework.dll not found"
      #       exit 1
      #     }

      # - name: Find and Copy HtmlAgilityPack.dll to RockWeb/Bin
      #   shell: pwsh
      #   run: |
      #     # Search for the HtmlAgilityPack package folder in the "packages" directory
      #     $entityFrameworkPath = Get-ChildItem -Path "packages" -Recurse -Filter "HtmlAgilityPack.dll" | Where-Object { $_.FullName -match "lib\\Net45" } | Select-Object -First 1

      #     # If EntityFramework.dll is found, copy it to RockWeb/Bin
      #     if ($entityFrameworkPath) {
      #       Write-Host "Found HtmlAgilityPack.dll at: $($entityFrameworkPath.FullName)"
      #       Copy-Item -Path $entityFrameworkPath.FullName -Destination "RockWeb/Bin/HtmlAgilityPack.dll" -Force
      #     } else {
      #       Write-Host "HtmlAgilityPack.dll not found"
      #       exit 1
      #     }
  
      # # Step 5: Build the solution using MSBuild
      # - name: Build with MSBuild
      #   run: |
      #     msbuild Rock.sln -t:rebuild -verbosity:diag -property:Configuration=Release

      # Step 6: Run Tests
      # - name: Run Tests
      #   run: |
      #    vstest.console.exe Rock.Tests.dll

      # Step 7: Cache Node_modules or NuGet packages (optional, if needed)
      # Uncomment if needed for caching NuGet packages or Node_modules
      # - name: Cache NuGet or Node_modules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       **/node_modules
      #       **/packages
      #     key: ${{ runner.os }}-build-cache

  
      # Step 8: Upload Artifacts (for IIS deployment or further inspection)
      - name: Upload RockWeb Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BuildOutput
          path: |
            ./RockWeb/bin
